ENV["LC_ALL"] = "en_US.UTF-8"

$install_puppet = <<-SCRIPT
<% puppetInstallScript.forEach(command => { %>
  <%= command %>
<% }) %>
echo <%= typeof(osfamily) %>
echo <%= osfamily %>
<% if(osfamily === 'debian') { %>
  sudo sed -i 's/# auth required pam_wheel.so/auth required pam_wheel.so/g' /etc/pam.d/su
<% } %>
SCRIPT

$install_jq = <<-SCRIPT
<% if(osfamily === 'redhat') { %>
  puppet module install puppet-epel
  puppet apply -e 'include epel'
  sudo yum install jq -y
<% } else if(osfamily === 'debian') { %>
  sudo apt-get install jq -y
<% } else { %>
  echo 'Unsupported platform'
  exit 1
<% } %>
SCRIPT

$fetch_facts = <<-SCRIPT
network_interfaces_ipv4_length=$(facter networking.interfaces --json | jq '[[."networking.interfaces"[]] | map(select(has("ip")))[] | .ip ] | length' -r)
echo "###facter_ip_count ${network_interfaces_ipv4_length} facter_ip_count###"
network_interfaces_ipv4_length=$(expr "$network_interfaces_ipv4_length * 1")
ip_array=$(facter networking.interfaces --json | jq '[[."networking.interfaces"[]] | map(select(has("ip")))[] | .ip ]')
iterator=0
while [[ "$iterator" -ne "$network_interfaces_ipv4_length" ]]
do
  facter_ip=$(echo $ip_array | jq '.[$a | tonumber]' -r --arg a $iterator)
  echo "###facter_ip_${iterator}#${facter_ip}#facter_ip_${iterator}###"
  iterator=$((iterator + 1))
done
os_architecture=$(facter os.architecture)
echo "###facter_os_architecture ${os_architecture} facter_os_architecture###"
os_family=$(facter os.family)
echo "###facter_os_family ${os_family} facter_os_family###"
os_hardware=$(facter os.hardware)
echo "###facter_os_hardware ${os_hardware} facter_os_hardware###"
os_name=$(facter os.name)
echo "###facter_os_name ${os_name} facter_os_name###"
os_release=$(facter os.release.full)
echo "###facter_os_release ${os_release} facter_os_release###"
memory_swap=$(facter memory.swap.total)
echo "###facter_memory_swap ${memory_swap} facter_memory_swap###"
memory_system=$(facter memory.system.total)
echo "###facter_memory_system ${memory_system} facter_memory_system###"
kernel=$(facter kernel)
echo "###facter_kernel ${kernel} facter_kernel###"
kernelrelease=$(facter kernelrelease)
echo "###facter_kernelrelease ${kernelrelease} facter_kernelrelease###"
timezone=$(facter timezone)
echo "###facter_timezone ${timezone} facter_timezone###"
virtual=$(facter virtual)
echo "###facter_virtual ${virtual} facter_virtual###"
is_virtual=$(facter is_virtual)
echo "###facter_is_virtual ${is_virtual} facter_is_virtual###"
disks_model=$(facter disks.sda.model)
echo "###facter_disks_sda_model ${disks_model} facter_disks_sda_model###"
disks_size=$(facter disks.sda.size)
echo "###facter_disks_sda_size ${disks_size} facter_disks_sda_size###"
filesystems=$(facter filesystems)
echo "###facter_filesystems ${filesystems} facter_filesystems###"
processors_count=$(facter processors.count)
echo "###facter_processors_count ${processors_count} facter_processors_count###"
processors_count=$(expr "$processors_count * 1")
iterator=0
while [[ "$iterator" -ne "$processors_count" ]]
do
  model=$(facter processors.models.$iterator)
  echo "###facter_processors_models_${iterator}#${model}#facter_processors_models_${iterator}###"
  iterator=$((iterator + 1))
done
processors_isa=$(facter processors.isa)
echo "###facter_processors_isa ${processors_isa} facter_processors_isa###"
processors_physicalcount=$(facter processors.physicalcount)
echo "###facter_processors_physicalcount ${processors_physicalcount} facter_processors_physicalcount###"
SCRIPT

$config_user = <<-SCRIPT
sudo adduser <%= sshUser %> <% if(osfamily === 'debian') { %><%= '--force-badname' %><% } %>
sudo echo -e "<%= password %>\n<%= password %>" | passwd <%= sshUser %>
sudo usermod -aG wheel <%= sshUser %>
sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
sudo echo 'AllowUsers <%= sshUser %>' >> /etc/ssh/sshd_config
sudo systemctl restart sshd
SCRIPT

Vagrant.configure("2") do |config|
  config.vm.box = "<%= box %>"
  config.vm.hostname = "<%= hostname %>"
  config.vm.network "public_network", use_dhcp_assigned_default_route: true # bridge: "en0: Wi-Fi (Wireless)"
  config.vm.provision "shell", inline: $install_puppet
  config.vm.provision "shell", inline: $install_jq
  config.vm.provision "shell", inline: $fetch_facts
  config.vm.provision "shell", inline: $config_user
  config.ssh.insert_key = false
end
